* 0. What’s your team name, and who’s on your team?

/Stone and Sand/

* 1. What's the link to your GitHub repo?

https://github.com/stoneandsand/stoneandsand/

* 2. What's the link to your Waffle.io (or alternative)?

https://waffle.io/stoneandsand/stoneandsand 

* 3. What's your project idea (in 1 or 2 sentences)?

Daily life event tracker with data visualization.

* 4. What tech stack do you plan on focusing on? Which parts are familiar, and which parts are new?

+ Tech Stack:
  - MongoDB + Mongoose
  - Express
  - React + Axios
  - Node

+ Additional technologies:
  - Webpack
  - Redux
  - Chart.js
  - Calendaring API

* 5. What parts have you not decided yet?

* 6. Who is the product owner? Who is the scrum master? What are their roles (in 1 sentence)?

+ Product Owner: David Wen Riccardi-Zhu
  - Role: Tie-breaker.

+ Scrum Master: Chucky
  - Role: Facilitate scrum ceremonies.

* 7. What is your app going to look like?
Diagram.
# IMAGE LINK

* 8. What's on your list of MVP features? Which will you cut back if you run out of time? Which are stretch goals if you have extra time?
** MVP FEATURES
+ [ ] Create Sessions
+ [ ] Log Event
+ [ ] Create Event
+ [ ] Display Event / Tables
+ [ ] Charts

** STRETCH GOALS
+ [ ] Custom Tables per Activity
+ [ ] Aesthetics
+ [ ] Authentication
+ [ ] Date Range
+ [ ] Calendar
  - [ ] Planning Events

* 9. What’s your schema going to look like?
#+BEGIN_SRC javascript
  database = {
    {
      user: String,
      password: String,
      habits: {
        smoking: {
          unit: 'packs',
          limit: 5,
          timeframe: 'day',
          occurrences: [{ timestamp: '20171114', value: 3},{ timestamp: '20171115', value: 3}, { timestamp: '20171116', value: 5}, { timestamp: '20171117', value: 8}]
        },
        videogames: {
          unit: 'hours',
          limit: 8,
          timeframe: 'week',
          occurrences: [{ timestamp: '20171114', value: 3},{ timestamp: '20171115', value: 3}, { timestamp: '20171116', value: 5}, { timestamp: '20171117', value: 8}]
        }
      }
    }
  };
#+END_SRC   


* 10. What components are necessary (client side, server side, database, outside APIs, etc)?
How are these pieces going to be connected? 
Architectural diagram.
# IMAGE LINK

* 11. What are your RESTful API endpoints going to be?
|---------+-------------------------------+---------------------+--------------------|
| METHOD  | URL                           | REQUEST             | RESPONSE           |
|---------+-------------------------------+---------------------+--------------------|
| GET     | /                             |                     | html               |
| GET (?) | /login                        |                     | html               |
| POST    | /login                        | {username: 'stone') | redirect           |
| GET     | /signup                       |                     | html               |
| POST    | /signup                       | json (username)     | redirect           |
| GET     | /username                     |                     | html               |
| GET     | /api/username/event           | json (username)     | (array of objects) |
| POST    | /api/username/event           | json (event info)   | string             |
| POST    | /api/username/createEventType | json                | string             |
|---------+-------------------------------+---------------------+--------------------|

* 12. Who's working on which parts of the app?
We will rotate to gain exposure with the full stack, and to improve documentation.

* 13. What are you most excited about for this project?

- Alex: Not lonely anymore.
- Chucky: The groupwork, and learning the front-end better.
- David: Chart.js!
- Jon: Fullstack practice.

* 14. What are you looking forward to the least for this project?

- Alex: Possibility of breaking the app because of one stupid mistake.
- Chucky: git
- David: git
- Jon: git

* 15. What other questions do you have for your tech mentor?

* 16. What are your plans for solo week? What days/times are you meeting? Who’s taking which days off?
- 0800-1200 PST.
- No work on Thursday, Sunday.

* ARCHIVES
** Archived Tables                                                  :ARCHIVE:
*** Revision 1
**** One Table Approach
|----------+--------+------------------|
| _id      | USER   | EVENTS           |
|----------+--------+------------------|
| objectId | string | Array of Objects |
|----------+--------+------------------|
Each object is an event object {event: '', timestamp: new Date(), description: '', duration: ''}

**** Two Tables Approach
|----------+--------+--------------------|
| _id      | USER   | EVENTS             |
|----------+--------+--------------------|
| objectId | string | Array of objectIds |
|----------+--------+--------------------|


|----------+-----------+----------+--------+----------|
| _id      | TIMESTAMP | DURATION | EVENT  | USER     |
|----------+-----------+----------+--------+----------|
| objectId | Date      | Date     | string | objectId |
|----------+-----------+----------+--------+----------|

*** Revision 2
**** OPTION 1:
 One event per user.
 |----------+--------+----------+--------+--------+-----------+--------------------------------------|
 | _id      | USER   | PASSWORD | UNIT   |  LIMIT | TIMEFRAME | OCCURRENCES                          |
 |----------+--------+----------+--------+--------+-----------+--------------------------------------|
 | objectId | String |          | String | Number | String    | Array of objects                     |
 | xxxxxxxx | sand   |          | packs  |      5 | day       | [{ timestamp: '20171114', value: 3}] |
 | xxxxxxxx | stone  |          | pills  |      3 | week      | [{ timestamp: '20171114', value: 3}] |
 |----------+--------+----------+--------+--------+-----------+--------------------------------------|
 Potentially use one object for limit + timeframe.

**** OPTION 2:
 Multiple events per user, additional column for event.
 |----------+--------+----------+--------+------------+--------+-----------+--------------------------------------|
 | _id      | USER   | PASSWORD | UNIT   | EVENT      |  LIMIT | TIMEFRAME | OCCURRENCES                          |
 |----------+--------+----------+--------+------------+--------+-----------+--------------------------------------|
 | objectId | String |          | String | String     | Number | String    | Array of objects                     |
 | xxxxxxxx | sand   |          | packs  | smoking    |      5 | day       | [{ timestamp: '20171114', value: 3}] |
 | xxxxxxxx | sand   |          | hours  | videogames |      5 | day       | [{ timestamp: '20171114', value: 3}] |
 | xxxxxxxx | stone  |          | pills  |            |      3 | week      | [{ timestamp: '20171114', value: 3}] |
 |----------+--------+----------+--------+------------+--------+-----------+--------------------------------------|
 Potentially use one object for limit + timeframe.

**** OPTION 3:
 Multiple events per user, occurrences object has sub-objects for each type of event.
 |----------+--------+----------+-----------|
 | _id      | USER   | PASSWORD | EVENTS    |
 |----------+--------+----------+-----------|
 | objectId | String |          | Object    |
 | xxxxxxxx | sand   |          | *see below* |
 | xxxxxxxx | stone  |          | *see below* |
 |----------+--------+----------+-----------|

***** Occurrences Object for Multiple Event Types
 If we add multiple events, drop unit column, evolve occurrences to this schema:
 #+BEGIN_SRC javascript
   events = {
     smoking: {
       unit: 'packs',
       limit: 5,
       timeframe: 'day',
       occurrences: [{ timestamp: '20171114', value: 3},{ timestamp: '20171115', value: 3}, { timestamp: '20171116', value: 5}, { timestamp: '20171117', value: 8}]
     },
     videogames: {
       unit: 'hours',
       limit: 8,
       timeframe: 'week',
       occurrences: [{ timestamp: '20171114', value: 3},{ timestamp: '20171115', value: 3}, { timestamp: '20171116', value: 5}, { timestamp: '20171117', value: 8}]
     }
   };

   let unit = occurrences.videogames.unit;
   let limit = occurences.videogames.limit;
   let lastWeek = occurrences.videogames.occurrences.forEach((occurrence) => {
     console.log(occurence.timestamp);
     console.log(occurrence.value);
   });
 #+END_SRC

**** OPTION 4:
 Multiple events per user, two tables.
 |-----+-------+----------|
 | _id | USER  | PASSWORD |
 |-----+-------+----------|
 |   1 | stone |          |
 |   2 | sand  |          |
 |-----+-------+----------|


 |-----+---------+-------------+-------+-------+-----------+--------------------------------------|
 | _id | USER_id | EVENT       | UNIT  | LIMIT | TIMEFRAME | OCCURRENCES                          |
 |-----+---------+-------------+-------+-------+-----------+--------------------------------------|
 |   1 |       1 | smoking     | packs |     5 | day       | [{ timestamp: '20171114', value: 3}] |
 |   2 |       1 | video-games | hours |     8 | week      | [{ timestamp: '20171114', value: 3}] |
 |   3 |       2 | medicine    | pills |     3 | week      | [{ timestamp: '20171114', value: 3}] |
 |-----+---------+-------------+-------+-------+-----------+--------------------------------------|
 Potentially use one object for limit + timeframe.

**** Example Data
**** Occurrences Array
#+BEGIN_SRC javascript
[{ timestamp: '20171114', value: 3},{ timestamp: '20171115', value: 3}, { timestamp: '20171116', value: 5}, { timestamp: '20171117', value: 8} ]
#+END_SRC
